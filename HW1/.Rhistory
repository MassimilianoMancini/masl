Y[lower.tri(Y)] = rbinom(n*(n-1)/2, 1, p0)
Y = Y + t(Y)
brg <- graph_from_adjacency_matrix(Y)
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(0, n, n)
Ysim = matrix(0, n, n)
Ysim[lower.tri(Y)] = rbinom(n*(n-1)/2, 1, p0)
Ysim = Ysim + t(Ysim)
brgSim <- graph_from_adjacency_matrix(Ysim)
diag(Ysim) <- NA
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
par(mfrow = c(1,1))
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
rm(list = ls())
library(igraph)
set.seed(111)
# Binomial Random Graphs
par(mar=c(1,1,1,1))
p0 = 0.6
n <- 20
Y <- matrix(0, n, n)
Y = matrix(0, n, n)
Y[lower.tri(Y)] = rbinom(n*(n-1)/2, 1, p0)
Y = Y + t(Y)
brg <- graph_from_adjacency_matrix(Y)
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(0, n, n)
Ysim = matrix(0, n, n)
Ysim[lower.tri(Y)] = rbinom(n*(n-1)/2, 1, p0)
Ysim = Ysim + t(Ysim)
brgSim <- graph_from_adjacency_matrix(Ysim)
diag(Ysim) <- NA
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
par(mfrow = c(1,1))
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
# p-value
mean(rhoSim >= rhoObs)
rm(list = ls())
library(igraph)
set.seed(111)
# Binomial Random Graphs
par(mar=c(1,1,1,1))
p0 = 0.5
n <- 20
Y <- matrix(0, n, n)
Y = matrix(0, n, n)
Y[lower.tri(Y)] = rbinom(n*(n-1)/2, 1, p0)
Y = Y + t(Y)
brg <- graph_from_adjacency_matrix(Y)
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(0, n, n)
Ysim = matrix(0, n, n)
Ysim[lower.tri(Y)] = rbinom(n*(n-1)/2, 1, p0)
Ysim = Ysim + t(Ysim)
brgSim <- graph_from_adjacency_matrix(Ysim)
diag(Ysim) <- NA
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
par(mfrow = c(1,1))
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(rbinom(n^2, 1, pmle), n, n)
diag(Ysim) <- NA
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
# Binomial Random Graphs
data(florentine)
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024, vertex.label = V(brg)$names)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = V(brg)$names)
V(brg)$names
V(brg)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = V(brg))
brg
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = V(brg))
dev.off()
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = V(brg))
dev.off()
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
rhoObs
traObs
for (b in 1:B) {
Ysim <- matrix(rbinom(n^2, 1, pmle), n, n)
diag(Ysim) <- NA
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(rbinom(n^2, 1, pmle), n, n)
diag(Ysim) <- NA
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
setwd("~/unifi/masl/HW1")
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(rbinom(n^2, 1, pmle), n, n)
diag(Ysim) <- NA
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
mean(rhoSim)
rhoObs
mean(traObs)
mean(traSim)
mean(rhoObs > rhoSim)
mean(traObs > traSim)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
brg <- graph_from_adjacency_matrix(Y)
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(rbinom(n^2, 1, pmle), n, n)
diag(Ysim) <- NA
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
density(flobusiness)
?density
graph.density(flobusiness)
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness)
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
# Binomial random graph
brg <- graph_from_adjacency_matrix(Y, mode = 'undirected')
Y
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness, mode = 'undirected')
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
# Binomial random graph
brg <- graph_from_adjacency_matrix(Y, mode = 'undirected')
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
# transitivity
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(rbinom(n*(n-1)/2, 1, pmle), n, n)
diag(Ysim) <- NA
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
setwd("~/unifi/masl/HW1")
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness, mode = 'undirected')
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
# Binomial random graph
brg <- graph_from_adjacency_matrix(Y, mode = 'undirected')
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
# transitivity
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim <- matrix(rbinom(n*(n-1)/2, 1, pmle), n, n)
diag(Ysim) <- NA
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim, na.rm = TRUE)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
mean(rhoObs > rhoSim)
mean(traObs > traSim)
rm(list = ls())
library(igraph)
library(ergm)
set.seed(111)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness, mode = 'undirected')
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
# Binomial random graph
brg <- graph_from_adjacency_matrix(Y, mode = 'undirected')
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
# transitivity
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim = matrix(0, n, n)
tmp = rbinom(n*(n-1)/2, 1, pmle)
Y[lower.tri(Y)] = tmp
Y = Y + t(Y)
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
mean(rhoObs > rhoSim)
mean(traObs > traSim)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim = matrix(0, n, n)
tmp = rbinom(n*(n-1)/2, 1, pmle)
Ysim[lower.tri(Y)] = tmp
Ysim = Ysim + t(Y)
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim = matrix(0, n, n)
tmp = rbinom(n*(n-1)/2, 1, pmle)
Ysim[lower.tri(Ysim)] = tmp
Ysim = Ysim + t(Ysim)
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
rm(list = ls())
library(igraph)
library(ergm)
set.seed(1)
# Binomial Random Graphs
data(florentine)
names = get.vertex.attribute(flobusiness, "vertex.names")
Y <- as.matrix.network(flobusiness, mode = 'undirected')
n <- nrow(Y)
pmle <- mean(Y, na.rm = TRUE)
# Binomial random graph
brg <- graph_from_adjacency_matrix(Y, mode = 'undirected')
png(filename = 'graph.png', width = 1024, height = 1024)
plot (brg, vertex.size = 20, edge.arrow.size = 0.005, vertex.label = names)
dev.off()
# density
rhoObs <- mean(Y, na.rm = TRUE)
# transitivity
traObs <- transitivity(brg)
B <- 1000
rhoSim <- c()
traSim <- c()
for (b in 1:B) {
Ysim = matrix(0, n, n)
tmp = rbinom(n*(n-1)/2, 1, pmle)
Ysim[lower.tri(Ysim)] = tmp
Ysim = Ysim + t(Ysim)
brgSim <- graph_from_adjacency_matrix(Ysim)
rhoSim[b] <- mean(Ysim)
traSim[b] <- transitivity(brgSim)
}
# graphical comparison
png(filename = 'mean.png', width = 1024, height = 1024)
hist(rhoSim, col = "lightgray", main = "Mean")
abline(v = rhoObs, col = "red", lwd = 2)
dev.off()
png(filename = 'tran.png', width = 1024, height = 1024)
hist(traSim, col = "lightgray", main = "Transitivity")
abline(v = traObs, col = "red", lwd = 2)
dev.off()
